from synch import Lock, acquire, release
import election

threads_executed = 0
number_of_spawned_threads = 5

NUM_CANDIDATES = 2 
NUM_CITIZENS = 3
EXPECTED_VOTES = [3, 0]
WINNER = 0

e = election.Election(NUM_CANDIDATES, NUM_CITIZENS)

def complete():
    atomically:
        threads_executed += 1

def test_vote(e, candidate_idx, citizen_idx):
    election.vote(e, candidate_idx, citizen_idx)
    complete()

def test_withdraw(e, first_candidate, second_candidate, citizen_idx):
    election.vote(e, first_candidate, citizen_idx)
    election.withdraw(e, citizen_idx)
    election.vote(e, second_candidate, citizen_idx)
    complete()

def test_transfer(e, fr, to):
    election.transfer(e, fr, to)
    complete()

def end_test():
    atomically when threads_executed == number_of_spawned_threads:
        # transfer votes from second candidate to the first one
        election.transfer(?e, 1, 0)
        for i in {0, NUM_CANDIDATES -1}:
            let received_votes = election.get_votes(?e, i):
                assert EXPECTED_VOTES[i] == received_votes

        let winner_idx = election.winner(?e):
            assert winner_idx == WINNER

spawn test_vote(?e, 0, 0)
spawn test_vote(?e, 1, 1)
spawn test_vote(?e, 1, 1)
spawn test_withdraw(?e, 0, 1, 2)
spawn test_transfer(?e, 1, 0)

spawn end_test()

# sequential correctneess test
e_two = election.Election(4, 4)
election.vote(?e_two, 0, 0)
election.vote(?e_two, 0, 1)
election.vote(?e_two, 1, 2)
election.vote(?e_two, 1, 3)
# 2 @ 1 ; 2,3 and 2 @ 0 ; 0,1
election.withdraw(?e_two, 3)
# 1 @ 1 and 2 @ 0
election.transfer(?e_two, 0, 2)
# 1 @ 1 and 2 @ 2
election.vote(?e_two, 1, 3)
# 2 @ 1 and 2 @ 2
election.transfer(?e_two, 1, 0)
# 2 @ 0 and 2 @ 2
var zero_votes = election.get_votes(?e_two, 0) 
var two_votes = election.get_votes(?e_two, 2)
assert zero_votes == 2
assert two_votes == 2
election.withdraw(?e_two, 3)
# 1 @ 0 and 2 @ 2
election.vote(?e_two, 2, 3)
# 1 @ 0 and 3 @ 2
var winner = election.winner(?e_two)
assert winner == 2

NUM_CANDIDATES2 = 2 
NUM_CITIZENS2 = 4
WINNER2 = 0
e2 = election.Election(NUM_CANDIDATES2, NUM_CITIZENS2)

#casting initial vote
voted = election.vote(?e2, 1, 0)
assert voted == True 

#ensuring that vote count is correct
num_votes = election.get_votes(?e2, 1)
assert num_votes == 1 

#trying to cast a vote from a citizen who has already voted
result = election.vote(?e2, 0, 0)
assert result == False
num_votes = election.get_votes(?e2, 0)
assert num_votes == 0

#withdrawing and making sure that it works 
withdrew = election.withdraw(?e2,0)
assert withdrew == True 
num_votes = election.get_votes(?e2, 1)
assert num_votes == 0

#withdrawing a voter that has not voted
withdrew = election.withdraw(?e2,0)
assert withdrew == False

election.vote(?e2, 1, 0)
election.vote(?e2, 1, 1)
election.vote(?e2, 1, 2)
election.vote(?e2, 1, 3)

#transfering
election.transfer(?e2, 1,0)
num_votes = election.get_votes(?e2,0)
assert num_votes == 4 

#checking that there are no votes from candidate that got transfered
num_votes = election.get_votes(?e2,1)
assert num_votes ==0

winner = election.winner(?e2)
assert winner == WINNER2

