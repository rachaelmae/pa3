from synch import Lock, acquire, release

def Election(n,m):
    result = {.candidates:[0,]*n, .cand_locks:[Lock(),]*n, .citizens:[{.voted: False, .voted_for: -1},]*m, .cit_locks:[Lock(),]*m}

def vote(election, candidate, citizen):
    acquire(?election->cand_locks[candidate])
    acquire(?election->cit_locks[citizen])

    if election->citizens[citizen].voted:
        result = False
    else:
        election->citizens[citizen].voted = True
        election->citizens[citizen].voted_for = candidate
        election->candidates[candidate] += 1
        result = True

    release(?election->cit_locks[citizen])
    release(?election->cand_locks[candidate])


def withdraw(election, citizen):
    acquire(?election->cit_locks[citizen])
    var orig_vote = election->citizens[citizen].voted_for
    release(?election->cit_locks[citizen])

    if orig_vote == -1:
        result = False
    else:
        acquire(?election->cand_locks[orig_vote])
        acquire(?election->cit_locks[citizen])
        
        var new_voted = election->citizens[citizen]
        if new_voted != orig_vote:
            result = False
        else:
            election->citizens[citizen].voted = False
            election->candidates[orig_vote] -= 1
            election->citizens[citizen].voted_for = -1
            result = True

        release(?election->cit_locks[citizen])
        release(?election->cand_locks[orig_vote])

    if election->citizens[citizen].voted:
        pass
    else:
        result = False


def get_votes(election, candidate):
    acquire(?election->cand_locks[candidate])
    result = election->candidates[candidate]
    release(?election->cand_locks[candidate])

def transfer(election, candidate_from, candidate_to):
    if candidate_from < candidate_to:
        acquire(?election->cand_locks[candidate_from])
        acquire(?election->cand_locks[candidate_to])
    else:
        acquire(?election->cand_locks[candidate_to])
        acquire(?election->cand_locks[candidate_from])


    election->candidates[candidate_to] += election->candidates[candidate_from]
    election->candidates[candidate_from] = 0
    for i in {0 .. len(election->citizens) - 1}:
        acquire(?election->cit_locks[i])
        if (election->citizens[i].voted_for == candidate_from):
            election->citizens[i].voted_for = candidate_to

    for i in {0 .. len(election->citizens) - 1}:
        var idx = len(election->citizens) - i
        release(?election->cit_locks[idx - 1])

    if candidate_from > candidate_to:
        release(?election->cand_locks[candidate_from])
        release(?election->cand_locks[candidate_to])
    else:
        release(?election->cand_locks[candidate_to])
        acquire(?election->cand_locks[candidate_from])

def winner(election):
    var winner = -1;
    var winner_count = 0;
    for i in {0 .. len(election->candidates) - 1}:
        acquire(?election->cand_locks[i])
        if election->candidates[i] > winner_count:
            winner_count = election->candidates[i]
            winner = i
        release(?election->cand_locks[i])
    result = winner
